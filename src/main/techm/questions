There is an array A consisting of N integers. What is the maximum sum of two integers from A 
that share their first and last digits?  
If there are no two integers that share their first and last digits, the function should return âˆ’1.

Examples:
Q)findSumOfNumbersWithSameFirstAndLastDigit
A) Given A = [130, 191, 10, 200], the function should return 140. The only integers in A that share first and last digits are 130 and 10.//

public static int findSumOfNumbersWithSameFirstAndLastDigit(int[] numbers) {
        int sum = 0;

        for (int number : numbers) {
            String numberStr = String.valueOf(number); // Convert the number to a string
            int firstDigit = Character.getNumericValue(numberStr.charAt(0)); // First digit
            int lastDigit = Character.getNumericValue(numberStr.charAt(numberStr.length() - 1)); // Last digit

            if (firstDigit == lastDigit) {
                sum += number; // Add to sum if first and last digits match
            }
        }
        return sum;
    }
Q)findMaxSumOfSameFirstAndLastDigit

Given A = [405, 45, 300, 300], the function should return 600. There are two pairs of integers that share first and last digits: (405, 45) and (300, 300). The sum of the two 300s is bigger than the sum of 405 and 45.

 A)public static int findMaxSumOfSameFirstAndLastDigit(int[] numbers) {
        // Map to store the sum of numbers sharing the same first and last digits
        Map<String, Integer> digitGroupSums = new HashMap<>();

        for (int number : numbers) {
            String numberStr = String.valueOf(number); // Convert number to string
            char firstDigit = numberStr.charAt(0); // First digit
            char lastDigit = numberStr.charAt(numberStr.length() - 1); // Last digit

            // Create a key to group by first and last digits
            String key = firstDigit + "-" + lastDigit;

            // Add the current number to the group's sum
            digitGroupSums.put(key, digitGroupSums.getOrDefault(key, 0) + number);
        }

        // Find the maximum sum among all groups
        int maxSum = 0;
        for (int sum : digitGroupSums.values()) {
            maxSum = Math.max(maxSum, sum);
        }

        return maxSum;
    }

Q)findTotalSumOfSameFirstAndLastDigit
 Given A = [30, 909, 3190, 99, 3990, 9009], the function should return 9918.

A)public static int findTotalSumOfSameFirstAndLastDigit(int[] numbers) {
        // Map to store the sum of numbers sharing the same first and last digits
        Map<String, Integer> digitGroupSums = new HashMap<>();

        for (int number : numbers) {
            String numberStr = String.valueOf(number); // Convert number to string
            char firstDigit = numberStr.charAt(0); // First digit
            char lastDigit = numberStr.charAt(numberStr.length() - 1); // Last digit

            // Create a key to group numbers by first and last digits
            String key = firstDigit + "-" + lastDigit;

            // Add the current number to the group's sum
            digitGroupSums.put(key, digitGroupSums.getOrDefault(key, 0) + number);
        }

        // Calculate the total sum of all groups
        int totalSum = 0;
        for (int sum : digitGroupSums.values()) {
            totalSum += sum;
        }

        return totalSum;
    }
